{"version":3,"sources":["useMyState.jsx","App.js","serviceWorker.js","index.js"],"names":["useMyState","STARTING_TIME","useState","text","setText","timeRemaining","setTimeRemaining","start","setStart","textBoxRef","useRef","useEffect","setTimeout","time","handleChange","e","value","target","startGame","current","disabled","focus","wordsCount","trim","split","filter","word","length","App","ref","onChange","placeholder","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PA4CeA,MA1Cf,WAAyC,IAArBC,EAAoB,uDAAJ,GAAI,EACdC,mBAAS,IADK,mBAC/BC,EAD+B,KACzBC,EADyB,OAEIF,mBAASD,GAFb,mBAE/BI,EAF+B,KAEhBC,EAFgB,OAGZJ,oBAAS,GAHG,mBAG/BK,EAH+B,KAGxBC,EAHwB,KAIhCC,EAAaC,iBAAO,MA4B1B,OAlBAC,qBAAU,WACJJ,GAASF,EAAgB,EAC3BO,YAAW,WACTN,GAAiB,SAAAO,GAAI,OAAIA,EAAO,OAC/B,KACwB,IAAlBR,GACTG,GAAS,KAEV,CAACH,EAAeE,IAUZ,CACLA,QACAO,aAXF,SAAsBC,GAAI,IAChBC,EAAUD,EAAEE,OAAZD,MACRZ,EAAQY,IAURb,OACAE,gBACAa,UA/BF,WACEV,GAAS,GACTF,EAAiBL,GACjBG,EAAQ,IACRK,EAAWU,QAAQC,UAAW,EAC9BX,EAAWU,QAAQE,SA2BnBC,WAXF,SAAoBnB,GAElB,OADcA,EAAKoB,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,QAUzClB,eCCWmB,MAtCf,WAAgB,IAAD,EAST5B,EAAW,IAPbO,EAFW,EAEXA,MACAO,EAHW,EAGXA,aACAX,EAJW,EAIXA,KACAE,EALW,EAKXA,cACAa,EANW,EAMXA,UACAI,EAPW,EAOXA,WACAb,EARW,EAQXA,WAGF,OACE,6BACE,qDACA,wOAKA,8BACEoB,IAAKpB,EACLW,UAAWb,EACXuB,SAAUhB,EACVE,MAAOb,EACP4B,YAAY,cAEd,+CAAqB1B,EAArB,KACA,4BAAQe,SAAUb,EAAOyB,QAASd,GAAlC,SAGA,sCAEqB,IAAlBb,EAAA,UAAyBiB,EAAWnB,GAApC,qBAA+D,MCxBpD8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5498c37a.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\nfunction useMyState(STARTING_TIME = 10) {\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME);\n  const [start, setStart] = useState(false);\n  const textBoxRef = useRef(null);\n\n  function startGame() {\n    setStart(true);\n    setTimeRemaining(STARTING_TIME);\n    setText(\"\");\n    textBoxRef.current.disabled = false;\n    textBoxRef.current.focus();\n  }\n\n  useEffect(() => {\n    if (start && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      setStart(false);\n    }\n  }, [timeRemaining, start]);\n  function handleChange(e) {\n    const { value } = e.target;\n    setText(value);\n  }\n  function wordsCount(text) {\n    const words = text.trim().split(\" \");\n    return words.filter(word => word !== \"\").length;\n  }\n\n  return {\n    start,\n    handleChange,\n    text,\n    timeRemaining,\n    startGame,\n    wordsCount,\n    textBoxRef\n  };\n}\nexport default useMyState;\n","import React from \"react\";\nimport \"./App.css\";\nimport useMyState from \"./useMyState\";\n\nfunction App() {\n  const {\n    start,\n    handleChange,\n    text,\n    timeRemaining,\n    startGame,\n    wordsCount,\n    textBoxRef\n  } = useMyState(60);\n\n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n      <p>\n        To get the most accurate score, we recommend opening any random book or\n        article and re-type the text from there. Press start and start typing\n        right away. When the time is over, you will get your score.\n      </p>\n      <textarea\n        ref={textBoxRef}\n        disabled={!start}\n        onChange={handleChange}\n        value={text}\n        placeholder=\"type here\"\n      />\n      <h4>Time remaining: {timeRemaining} </h4>\n      <button disabled={start} onClick={startGame}>\n        start\n      </button>\n      <h4>\n        Result:\n        {timeRemaining === 0 ? `${wordsCount(text)} words per minute` : \"\"}\n      </h4>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}